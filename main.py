import logging
from aiogram import Bot, Dispatcher, executor, types


# Configure logging
logging.basicConfig(level=logging.INFO)
API_TOKEN = "6059259592:AAHZGLUzC7DijF6XCAnHbU1bGz4akGETYdA"
# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

buttonsBilets = [
    [types.KeyboardButton(text='–ë–∏–ª–µ—Ç—ã –ê–í'),
     types.KeyboardButton(text='–≠–∫–∑–∞–º–µ–Ω')],
    [types.KeyboardButton(text='–¢–µ–º—ã'),
     types.KeyboardButton(text='–ù–∞–∑–∞–¥...')]
]

buttonsStartKB = [
    [types.KeyboardButton(text='–¢–µ–æ—Ä–∏—èüìö'),
     types.KeyboardButton(text='–ë–∏–ª–µ—Ç—ãüöó')],
    [types.KeyboardButton(text='–ö–≤–∏–∑üö¶'),
     types.KeyboardButton(text='–°–ø—Ä–∞–≤–∫–∞üìÉ'),
     types.KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä')]
]
buttonsQuiz = [
    [types.KeyboardButton(text='quiz1'),
     types.KeyboardButton(text='quiz2')],
    [types.KeyboardButton(text='quiz3'),
     types.KeyboardButton(text='–ù–∞–∑–∞–¥...')]
]

# –í—Å–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∫–æ–ª–±—ç–∫–∞–º–∏ (–∫–æ–ª–±—ç–∫ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç –≤ –∫–æ–Ω—Ü–µ callback_theory)

buttonsTheory = [
    [types.InlineKeyboardButton(text='1', callback_data='1'),
     types.InlineKeyboardButton(text='2', callback_data='2')],
    [types.InlineKeyboardButton(text='3', callback_data='3'),
     types.InlineKeyboardButton(text='4', callback_data='4')],
    [types.InlineKeyboardButton(text='5', callback_data='5'),
     types.InlineKeyboardButton(text='6', callback_data='6')],
    [types.InlineKeyboardButton(text='7', callback_data='7'),
     types.InlineKeyboardButton(text='8', callback_data='8')],
    [types.InlineKeyboardButton(text='9', callback_data='9'),
     types.InlineKeyboardButton(text='10', callback_data='10')],
    [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥...', callback_data='back')]
]

buttonsStatistic = [
    [types.KeyboardButton(text='Statistic1'),
     types.KeyboardButton(text='Statistic2')],
    [types.KeyboardButton(text='Statistic3'),
     types.KeyboardButton(text='–ù–∞–∑–∞–¥...')]
]

buttonsRef = [
    [types.KeyboardButton(text='Ref1'),
     types.KeyboardButton(text='Ref2')],
    [types.KeyboardButton(text='Ref3'),
     types.KeyboardButton(text='–ù–∞–∑–∞–¥...')]
]

keyboardStart = types.ReplyKeyboardMarkup(keyboard=buttonsStartKB, resize_keyboard=True)
keyboardBilets = types.ReplyKeyboardMarkup(keyboard=buttonsBilets, resize_keyboard=True)
keyboardQuiz = types.ReplyKeyboardMarkup(keyboard=buttonsQuiz, resize_keyboard=True)
keyboardTheory = types.InlineKeyboardMarkup(inline_keyboard=buttonsTheory, resize_keyboard = True)
keyboardStatistic = types.ReplyKeyboardMarkup(keyboard=buttonsStatistic, resize_keyboard=True)
keyboardRef = types.ReplyKeyboardMarkup(keyboard=buttonsRef, resize_keyboard=True)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç DriveMeNuts!", reply_markup=keyboardStart)

@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_message(message: types.Message):
    match message.text:
        case '–ë–∏–ª–µ—Ç—ãüöó':
            await message.answer("temp", reply_markup=keyboardBilets)
        case '–ö–≤–∏–∑üö¶':
            await message.answer("temp", reply_markup=keyboardQuiz)
        case '–¢–µ–æ—Ä–∏—èüìö':
            await message.answer('–¢–µ–æ—Ä–∏—è', reply_markup=keyboardTheory)
        case '–°–ø—Ä–∞–≤–∫–∞üìÉ':
            await message.answer('temp', reply_markup=keyboardRef)
        case '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä':
            await message.answer("temp", reply_markup=keyboardStatistic)
        case '–ù–∞–∑–∞–¥...':
            await message.answer("–ú–µ–Ω—é", reply_markup=keyboardStart)
        case _:
            await message.answer("temp")




# –ó–∞–¥–∞–µ—Ç—Å—è —Ö—ç–Ω–¥–ª–µ—Ä –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–±—ç–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –≤—ã–∑—ã–≤–∞—é—Ç
@dp.callback_query_handler(text=['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'back'])
async def callback_theory(query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø–æ –Ω–µ–π –ø–æ—Ç–æ–º –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ñ–∞–π–ª
    button_text = query.data

    if query.data == 'back':
        await bot.send_message(query.from_user.id, reply_markup=keyboardStart)
    else:
        await bot.answer_callback_query(query.id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        with open(f'src/theory/pdf/{button_text}.pdf', 'rb') as file:
            await bot.send_document(query.from_user.id, file, caption=f"–¢–µ–æ—Ä–∏—è {button_text}")




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
