import logging
from aiogram import Bot, Dispatcher, executor, types

# Configure logging
logging.basicConfig(level=logging.INFO)
API_TOKEN = "6059259592:AAHZGLUzC7DijF6XCAnHbU1bGz4akGETYdA"
# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


buttonsBilets = [
    [types.KeyboardButton(text='–ë–∏–ª–µ—Ç—ã –ê–í'),
     types.KeyboardButton(text='–≠–∫–∑–∞–º–µ–Ω')],
    [types.KeyboardButton(text='–¢–µ–º—ã'),
     types.KeyboardButton(text='–ù–∞–∑–∞–¥...')]
]

buttonsStartKB = [
    [types.KeyboardButton(text='–¢–µ–æ—Ä–∏—èüìö'),
     types.KeyboardButton(text='–ë–∏–ª–µ—Ç—ãüöó')],
    [types.KeyboardButton(text='–ö–≤–∏–∑üö¶'),
     types.KeyboardButton(text='–°–ø—Ä–∞–≤–∫–∞üìÉ'),
     types.KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä')]
]
buttonsQuiz = [
    [types.KeyboardButton(text='quiz1'),
     types.KeyboardButton(text='quiz2')],
    [types.KeyboardButton(text='quiz3'),
     types.KeyboardButton(text='–ù–∞–∑–∞–¥...')]
]

# –í—Å–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∫–æ–ª–±—ç–∫–∞–º–∏ (–∫–æ–ª–±—ç–∫ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç –≤ –∫–æ–Ω—Ü–µ callback_theory)
theoryCallbacksArray = ['0']*25
for i in range(0, 25):
    theoryCallbacksArray[i] = 'theoryChapter' + str(i)

theoryFilesDict = {
    "theoryChapter1": "–û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è",
    "theoryChapter2": "–û–±—â–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π",
    "theoryChapter3": "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤",
    "theoryChapter4": "–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –ø–µ—à–µ—Ö–æ–¥–æ–≤",
    "theoryChapter5": "–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
    "theoryChapter6": "–°–∏–≥–Ω–∞–ª—ã —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞",
    "theoryChapter7": "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–π —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–Ω–∞–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
    "theoryChapter8": "–ù–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è, –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "theoryChapter9": "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø—Ä–æ–µ–∑–∂–µ–∏ÃÜ —á–∞—Å—Ç–∏",
    "theoryChapter10": "–°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è",
    "theoryChapter11": "–û–±–≥–æ–Ω, –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ, –≤—Å—Ç—Ä–µ—á–Ω—ã–π —Ä–∞–∑—ä–µ–∑–¥",
    "theoryChapter12": "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å—Ç–æ—è–Ω–∫–∞",
    "theoryChapter13": "–ü—Ä–æ–µ–∑–¥ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–≤",
    "theoryChapter14": "–ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤",
    "theoryChapter15": "–î–≤–∏–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–µ –ø—É—Ç–∏",
    "theoryChapter16": "–î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∞–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª—è–º",
    "theoryChapter17": "–î–≤–∏–∂–µ–Ω–∏–µ –≤ –∂–∏–ª—ã—Ö –∑–æ–Ω–∞—Ö",
    "theoryChapter18": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤",
    "theoryChapter19": "–ü–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏–º–∏ —Å–≤–µ—Ç–æ–≤—ã–º–∏ –ø—Ä–∏–±–æ—Ä–∞–º–∏ –∏ –∑–≤—É–∫–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏",
    "theoryChapter20": "–ë—É–∫—Å–∏—Ä–æ–≤–∫–∞ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤",
    "theoryChapter21": "–£—á–µ–±–Ω–∞—è –µ–∑–¥–∞",
    "theoryChapter22": "–ü–µ—Ä–µ–≤–æ–∑–∫–∞ –ª—é–¥–µ–π",
    "theoryChapter23": "–ü–µ—Ä–µ–≤–æ–∑–∫–∞ –≥—Ä—É–∑–æ–≤",
    "theoryChapter24": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–≤–∏–∂–µ–Ω–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç–æ–≤ –∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π –º–æ–ø–µ–¥–æ–≤",
    "theoryChapter25": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–≤–∏–∂–µ–Ω–∏—é –≥—É–∂–µ–≤—ã—Ö –ø–æ–≤–æ–∑–æ–∫, –∞ —Ç–∞–∫–∂–µ –∫ –ø—Ä–æ–≥–æ–Ω—É –∂–∏–≤–æ—Ç–Ω—ã—Ö"
}

buttonsTheory = [
    [types.InlineKeyboardButton(text='–í—Å—è —Ç–µ–æ—Ä–∏—è', callback_data='allTheoryFile')],
    [types.InlineKeyboardButton(text='1', callback_data='theoryChapter1'),
     types.InlineKeyboardButton(text='2', callback_data='theoryChapter2'),
     types.InlineKeyboardButton(text='3', callback_data='theoryChapter3'),
     types.InlineKeyboardButton(text='4', callback_data='theoryChapter4')],
    [types.InlineKeyboardButton(text='5', callback_data='theoryChapter5'),
     types.InlineKeyboardButton(text='6', callback_data='theoryChapter6'),
     types.InlineKeyboardButton(text='7', callback_data='theoryChapter7'),
     types.InlineKeyboardButton(text='8', callback_data='theoryChapter8')],
    [types.InlineKeyboardButton(text='9', callback_data='theoryChapter9'),
     types.InlineKeyboardButton(text='10', callback_data='theoryChapter10'),
     types.InlineKeyboardButton(text='11', callback_data='theoryChapter11'),
     types.InlineKeyboardButton(text='12', callback_data='theoryChapter12')],
    [types.InlineKeyboardButton(text='13', callback_data='theoryChapter13'),
     types.InlineKeyboardButton(text='14', callback_data='theoryChapter14'),
     types.InlineKeyboardButton(text='15', callback_data='theoryChapter15'),
     types.InlineKeyboardButton(text='16', callback_data='theoryChapter16')],
    [types.InlineKeyboardButton(text='17', callback_data='theoryChapter17'),
     types.InlineKeyboardButton(text='18', callback_data='theoryChapter18'),
     types.InlineKeyboardButton(text='19', callback_data='theoryChapter19'),
     types.InlineKeyboardButton(text='20', callback_data='theoryChapter20')],
    [types.InlineKeyboardButton(text='21', callback_data='theoryChapter21'),
     types.InlineKeyboardButton(text='22', callback_data='theoryChapter22'),
     types.InlineKeyboardButton(text='23', callback_data='theoryChapter23')],
    [types.InlineKeyboardButton(text='24', callback_data='theoryChapter24'),
     types.InlineKeyboardButton(text='25', callback_data='theoryChapter25')]

]

buttonsStatistic = [
    [types.KeyboardButton(text='Statistic1'),
     types.KeyboardButton(text='Statistic2')],
    [types.KeyboardButton(text='Statistic3'),
     types.KeyboardButton(text='–ù–∞–∑–∞–¥...')]
]

buttonsRef = [
    [types.KeyboardButton(text='Ref1'),
     types.KeyboardButton(text='Ref2')],
    [types.KeyboardButton(text='Ref3'),
     types.KeyboardButton(text='–ù–∞–∑–∞–¥...')]
]

keyboardStart = types.ReplyKeyboardMarkup(keyboard=buttonsStartKB, resize_keyboard=True)
keyboardBilets = types.ReplyKeyboardMarkup(keyboard=buttonsBilets, resize_keyboard=True)
keyboardQuiz = types.ReplyKeyboardMarkup(keyboard=buttonsQuiz, resize_keyboard=True)
keyboardTheory = types.InlineKeyboardMarkup(inline_keyboard=buttonsTheory, resize_keyboard=True)
keyboardStatistic = types.ReplyKeyboardMarkup(keyboard=buttonsStatistic, resize_keyboard=True)
keyboardRef = types.ReplyKeyboardMarkup(keyboard=buttonsRef, resize_keyboard=True)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç DriveMeNuts!", reply_markup=keyboardStart)


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_message(message: types.Message):
    match message.text:
        case '–ë–∏–ª–µ—Ç—ãüöó':
            await message.answer("temp", reply_markup=keyboardBilets)
        case '–ö–≤–∏–∑üö¶':
            await message.answer("temp", reply_markup=keyboardQuiz)
        case '–¢–µ–æ—Ä–∏—èüìö':
            await message.answer('–¢–µ–æ—Ä–∏—è', reply_markup=keyboardTheory)
        case '–°–ø—Ä–∞–≤–∫–∞üìÉ':
            await message.answer('temp', reply_markup=keyboardRef)
        case '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä':
            await message.answer("temp", reply_markup=keyboardStatistic)
        case '–ù–∞–∑–∞–¥...':
            await message.answer("–ú–µ–Ω—é", reply_markup=keyboardStart)
        case _:
            await message.answer("temp")


# –ó–∞–¥–∞–µ—Ç—Å—è —Ö—ç–Ω–¥–ª–µ—Ä –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–±—ç–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –≤—ã–∑—ã–≤–∞—é—Ç
@dp.callback_query_handler(text=theoryCallbacksArray)
async def callback_theory(query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø–æ –Ω–µ–π –ø–æ—Ç–æ–º –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ñ–∞–π–ª
    button_text = query.data
    await bot.answer_callback_query(query.id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –ø–∞—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–±—ç–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ theoryFilesDict
    with open(f'src/theory/pdf/{theoryFilesDict[button_text]}.pdf', 'rb') as file:
        await bot.send_document(query.from_user.id, file, caption=f"–¢–µ–æ—Ä–∏—è {button_text}")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
