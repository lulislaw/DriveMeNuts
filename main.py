import logging
import random

from aiogram import Bot, Dispatcher, executor, types
import asyncio
import time
# Configure logging
import boards
import strings
import tickets

logging.basicConfig(level=logging.INFO)
API_TOKEN = "6059259592:AAHZGLUzC7DijF6XCAnHbU1bGz4akGETYdA"
# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –í—Å–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∫–æ–ª–±—ç–∫–∞–º–∏ (–∫–æ–ª–±—ç–∫ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç –≤ –∫–æ–Ω—Ü–µ callback_theory)
theoryCallbacksArray = ['0'] * 26
for i in range(0, 26):
    theoryCallbacksArray[i] = 'theoryChapter' + str(i)

with open("src/theory/theoryPickedIntro.txt") as file:
    theoryPickedIntro = file.read()

keyboardStart = types.ReplyKeyboardMarkup(keyboard=boards.buttonsStartKB, resize_keyboard=True)
keyboardBilets = types.ReplyKeyboardMarkup(keyboard=boards.buttonsBilets, resize_keyboard=True)
keyboardQuiz = types.ReplyKeyboardMarkup(keyboard=boards.buttonsQuiz, resize_keyboard=True)
keyboardTheory = types.InlineKeyboardMarkup(inline_keyboard=boards.buttonsTheory, resize_keyboard=True)
keyboardStatistic = types.ReplyKeyboardMarkup(keyboard=boards.buttonsStatistic, resize_keyboard=True)
keyboardRef = types.ReplyKeyboardMarkup(keyboard=boards.buttonsRef, resize_keyboard=True)
keyboardAB = types.InlineKeyboardMarkup(inline_keyboard=boards.buttonsBiletAB, resize_keyboard=True)
keyboardAnswers = types.InlineKeyboardMarkup(inline_keyboard=boards.buttonsAnswers, resize_keyboard=True)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç DriveMeNuts!", reply_markup=keyboardStart)


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_message(message: types.Message):
    match message.text:
        case '–ë–∏–ª–µ—Ç—ãüöó':
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=keyboardBilets)
        case '–ë–∏–ª–µ—Ç—ã –ê–í':
            await message.answer("–ë–∏–ª–µ—Ç—ã –ê–í", reply_markup=keyboardAB)
        case '–ö–≤–∏–∑üö¶':
            await message.answer("temp", reply_markup=keyboardQuiz)
        case '–¢–µ–æ—Ä–∏—èüìö':
            await message.answer(theoryPickedIntro, reply_markup=keyboardTheory, parse_mode="html")
        case '–°–ø—Ä–∞–≤–∫–∞üìÉ':
            await message.answer('temp', reply_markup=keyboardRef)
        case '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä':
            await message.answer("temp", reply_markup=keyboardStatistic)
        case '–ù–∞–∑–∞–¥...':
            await message.answer("–ú–µ–Ω—é", reply_markup=keyboardStart)
        case _:
            await message.answer("temp")


# –ó–∞–¥–∞–µ—Ç—Å—è —Ö—ç–Ω–¥–ª–µ—Ä –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–±—ç–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –≤—ã–∑—ã–≤–∞—é—Ç
@dp.callback_query_handler(text=theoryCallbacksArray)
async def callback_theory(query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø–æ –Ω–µ–π –ø–æ—Ç–æ–º –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ñ–∞–π–ª
    button_text = query.data
    await bot.answer_callback_query(query.id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –ø–∞—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–±—ç–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ theoryFilesDict
    with open(f'src/theory/pdf/{strings.theoryFilesDict[button_text][0]}.pdf', 'rb') as file:
        await bot.send_document(query.from_user.id, file, caption=f"–¢–µ–æ—Ä–∏—è. –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
                                                                  f" \"{strings.theoryFilesDict[button_text][1]}\"")


currentAsk = 0
list = []
listMistake = []

@dp.callback_query_handler(lambda c: c.data.startswith('biletAB'))
async def process_callback_button(callback_query: types.CallbackQuery):
    button_number = callback_query.data.split('AB')[1]
    global list
    global listMistake
    global currentAsk
    list = tickets.getBilet(button_number)
    currentAsk = 0
    if button_number == '0':
        button_number = random.randrange(1, 21)
    await bot.send_message(chat_id=callback_query.message.chat.id, text=f'–ë–∏–ª–µ—Ç ‚Ññ{button_number}')
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text=f'{list[currentAsk].num}\n{list[currentAsk].text}', reply_markup=keyboardAnswers)


@dp.callback_query_handler(lambda c: c.data in ['ans1', 'ans2', 'ans3', 'ans4', 'ans5'])
async def process_callback_button(callback_query: types.CallbackQuery):
    global list
    global listMistake
    global currentAsk
    currentAsk = currentAsk + 1
    print(currentAsk)
    await bot.send_message(chat_id=callback_query.message.chat.id, text=f'–í–∞—à –æ—Ç–≤–µ—Ç {callback_query.data}')
    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        reply_markup=None)
    if(currentAsk < list.__len__()):
        await bot.send_message(chat_id=callback_query.message.chat.id,
                           text=f'{list[currentAsk].num}\n{list[currentAsk].text}', reply_markup=keyboardAnswers)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
